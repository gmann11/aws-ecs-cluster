{
  "Description": "Neo4j on AWS ECS with AWS Fargate.  **WARNING** You will be billed for the AWS resources used if you create a stack from this template.",
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "NetworkWhitelist": {
      "Description": " The IP address range that can be used to connect to Neo4j",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x.  For example, 0.0.0.0/0 for open internet access."
    },
    "Password": {
      "NoEcho": true,
      "Description": "initial neo4j password (uppercase, lowercase, and numbers only)",
      "Type": "String",
      "MinLength": 8,
      "MaxLength": 40,
      "AllowedPattern": "^[a-zA-Z0-9\\.-]+$"
    },
    "VolumeType": {
      "Description": "What kind of storage to attach",
      "Type": "String",
      "Default": "gp2",
      "AllowedValues": [
        "gp2",
        "st1"
      ]
    },
    "VolumeSizeGB": {
      "Description": "How much EBS storage is allocated to each cluster node, in GiB",
      "Type": "Number",
      "Default": "100",
      "MinValue": "10",
      "MaxValue": "1000",
      "ConstraintDescription": "Must be a valid EBS disk size in GiB."
    },
    "MemoryMB": {
      "Description": "How much memory allocated to each cluster node, in MiB",
      "Type": "Number",
      "Default": "128",
      "MinValue": "64",
      "ConstraintDescription": "Must be a valid memory size in MiB."
    },
    "CpuCapacity": {
      "Description": "How much Cpu capacity to allocate per node",
      "Type": "Number",
      "Default": "1",
      "MinValue": "1",
      "MaxValue": "512",
      "ConstraintDescription": "Valid number"
    },
    "Capacity" : {
      "Description": "Number of nodes in the cluster",
      "Type": "Number",
      "Default": "1",
      "MinValue": "1",
      "MaxValue": "3",
      "ConstraintDescription": "TBD"
    },
    "DockerImage": {
      "Description": "Docker image of Neo4j enterprise, e.g. 111111111111.dkr.ecr.us-east-1.amazonaws.com/neo:c531de3a6655b8c885330ca91b867431760392bf",
      "Type": "String"
    },
    "DockerECRARN": {
      "Description": "ARN of Docker ECR repository for images, e.g. arn:aws:ecr:us-east-1:111111111111:repository/neo",
      "Type": "String"
    },
    "Neo4jJavaHeap": {
      "Description": "Amount of initial and max heap to allocate to Neo4j",
      "Type": "String",
      "ConstraintDescription": "See Neo4j Docs - make sure heap + pagecache < container memory"
    },
    "Neo4jPageCache": {
      "Description": "Amount of memory to allocate to Neo4j Page Cache",
      "Type": "String",
      "ConstraintDescription": "See Neo4j Docs - make sure heap + pagecache < container memory"
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "InstanceTenancy": "default",
        "CidrBlock": "10.0.0.0/16",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  "Neo4jVPC",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          },
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          }
        ]
      }
    },
    "Subnet0": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.0.0.0/24",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  "Neo4jSubnet0",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          },
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          }
        ],
        "MapPublicIpOnLaunch": "true"
      }
    },
    "SubnetRouteTableAssociation0": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "Subnet0"
        },
        "RouteTableId": {
          "Ref": "RouteTable"
        }
      }
    },
    "SubnetNetworkAclAssociation0": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "Subnet0"
        },
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        }
      }
    },
    "Subnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.0.1.0/24",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  "Neo4jSubnet1",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          },
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          }
        ],
        "MapPublicIpOnLaunch": "true"
      }
    },
    "SubnetRouteTableAssociation1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "Subnet1"
        },
        "RouteTableId": {
          "Ref": "RouteTable"
        }
      }
    },
    "SubnetNetworkAclAssociation1": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "Subnet1"
        },
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        }
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  "Neo4jGateway",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          },
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          }
        ]
      }
    },
    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  "Neo4jRouteTable",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          },
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          }
        ]
      }
    },
    "Route": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "AttachGateway",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTable"
        },
        "DestinationCidrBlock": {
          "Ref": "NetworkWhitelist"
        },
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "NetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          }
        ]
      }
    },
    "BoltIngressNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "102",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": {
          "Ref": "NetworkWhitelist"
        },
        "PortRange": {
          "From": "7687",
          "To": "7687"
        }
      }
    },
    "BoltEgressNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "104",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": {
          "Ref": "NetworkWhitelist"
        },
        "PortRange": {
          "From": "7687",
          "To": "7687"
        }
      }
    },
    "Neo4jHTTPSIngressNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "103",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": {
          "Ref": "NetworkWhitelist"
        },
        "PortRange": {
          "From": "7473",
          "To": "7473"
        }
      }
    },
    "Neo4jHTTPSEgressNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "106",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": {
          "Ref": "NetworkWhitelist"
        },
        "PortRange": {
          "From": "7473",
          "To": "7473"
        }
      }
    },
    "HTTPSIngressNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "104",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": {
          "Ref": "NetworkWhitelist"
        },
        "PortRange": {
          "From": "443",
          "To": "443"
        }
      }
    },
    "HTTPSEgressNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "108",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": {
          "Ref": "NetworkWhitelist"
        },
        "PortRange": {
          "From": "443",
          "To": "443"
        }
      }
    },
    "HTTPIngressNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "105",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": {
          "Ref": "NetworkWhitelist"
        },
        "PortRange": {
          "From": "80",
          "To": "80"
        }
      }
    },
    "HTTPEgressNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "110",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": {
          "Ref": "NetworkWhitelist"
        },
        "PortRange": {
          "From": "80",
          "To": "80"
        }
      }
    },
    "Int1NetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "201",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "10.0.0.0/16",
        "PortRange": {
          "From": "5000",
          "To": "5000"
        }
      }
    },
    "Int2NetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "202",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "10.0.0.0/16",
        "PortRange": {
          "From": "6000",
          "To": "6000"
        }
      }
    },
    "Int3NetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "203",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "10.0.0.0/16",
        "PortRange": {
          "From": "7000",
          "To": "7000"
        }
      }
    },
    "InboundResponsePortsNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "300",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": {
          "Ref": "NetworkWhitelist"
        },
        "PortRange": {
          "From": "1024",
          "To": "65535"
        }
      }
    },
    "OutBoundResponsePortsNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "301",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": {
          "Ref": "NetworkWhitelist"
        },
        "PortRange": {
          "From": "1024",
          "To": "65535"
        }
      }
    },
    "SecurityGroupNeo4jEnterprise": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "GroupDescription": "Neo4j Ports",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "5000",
            "ToPort": "5000",
            "CidrIp": "10.0.0.0/16"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "6000",
            "ToPort": "6000",
            "CidrIp": "10.0.0.0/16"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "7000",
            "ToPort": "7000",
            "CidrIp": "10.0.0.0/16"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "7687",
            "ToPort": "7687",
            "CidrIp": {
              "Ref": "NetworkWhitelist"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "7473",
            "ToPort": "7473",
            "CidrIp": {
              "Ref": "NetworkWhitelist"
            }
          }
        ]
      }
    },
    "Neo4jCluster": {
      "Type": "AWS::ECS::Cluster",
      "Properties": {
        "ClusterName": { "Fn::Join": ["-",[ { "Ref": "AWS::StackName" }, "cluster" ] ] }
      }
    },
    "PrivateNameSpace": {
      "Type": "AWS::ServiceDiscovery::PrivateDnsNamespace",
      "Properties": {
        "Name": "neo4jcluster",
        "Vpc": { "Ref": "VPC" }
      }
    },
    "DiscoveryServiceCore1": {
      "Type": "AWS::ServiceDiscovery::Service",
      "Properties": {
        "Description": "Discovery Service for Neo4j Cluster",
        "DnsConfig": {
          "RoutingPolicy": "MULTIVALUE",
          "DnsRecords": [
            {
              "TTL": 60,
              "Type": "A"
            },
            {
              "TTL": 60,
              "Type": "SRV"
            }
          ]
        },
        "HealthCheckCustomConfig": {
          "FailureThreshold": 1
        },
        "Name": "core1",
        "NamespaceId": {
          "Ref": "PrivateNameSpace"
        }
      }
    },
    "DiscoveryServiceCore2": {
      "Type": "AWS::ServiceDiscovery::Service",
      "Properties": {
        "Description": "Discovery Service for Neo4j Cluster",
        "DnsConfig": {
          "RoutingPolicy": "MULTIVALUE",
          "DnsRecords": [
            {
              "TTL": 60,
              "Type": "A"
            },
            {
              "TTL": 60,
              "Type": "SRV"
            }
          ]
        },
        "HealthCheckCustomConfig": {
          "FailureThreshold": 1
        },
        "Name": "core2",
        "NamespaceId": {
          "Ref": "PrivateNameSpace"
        }
      }
    },
    "DiscoveryServiceCore3": {
      "Type": "AWS::ServiceDiscovery::Service",
      "Properties": {
        "Description": "Discovery Service for Neo4j Cluster",
        "DnsConfig": {
          "RoutingPolicy": "MULTIVALUE",
          "DnsRecords": [
            {
              "TTL": 60,
              "Type": "A"
            },
            {
              "TTL": 60,
              "Type": "SRV"
            }
          ]
        },
        "HealthCheckCustomConfig": {
          "FailureThreshold": 1
        },
        "Name": "core3",
        "NamespaceId": {
          "Ref": "PrivateNameSpace"
        }
      }
    },
    "Neo4jServiceCore1": {
      "Type": "AWS::ECS::Service",
      "Properties": {
        "ServiceName": "core1",
        "Cluster": { "Fn::Join": ["-",[ { "Ref": "AWS::StackName" }, "cluster" ] ] },
        "LaunchType": "FARGATE",
        "NetworkConfiguration": {
          "AwsvpcConfiguration": {
            "AssignPublicIp": "ENABLED",
            "SecurityGroups": [
              { "Ref": "SecurityGroupNeo4jEnterprise" }
            ],
            "Subnets": [
              { "Ref": "Subnet0" },
              { "Ref": "Subnet1" }
            ]
          }
        },
        "DesiredCount": 1,
        "TaskDefinition": { "Ref": "Neo4jInstanceTask1" },
        "ServiceRegistries": [
          {
            "RegistryArn": {
              "Fn::GetAtt": [
                "DiscoveryServiceCore1",
                "Arn"
              ]
            },
            "Port": 7474
          }
        ]
      }
    },
    "Neo4jServiceCore2": {
      "Type": "AWS::ECS::Service",
      "Properties": {
        "ServiceName": "core2",
        "Cluster": { "Fn::Join": ["-",[ { "Ref": "AWS::StackName" }, "cluster" ] ] },
        "LaunchType": "FARGATE",
        "NetworkConfiguration": {
          "AwsvpcConfiguration": {
            "AssignPublicIp": "ENABLED",
            "SecurityGroups": [
              { "Ref": "SecurityGroupNeo4jEnterprise" }
            ],
            "Subnets": [
              { "Ref": "Subnet0" },
              { "Ref": "Subnet1" }
            ]
          }
        },
        "DesiredCount": 1,
        "TaskDefinition": { "Ref": "Neo4jInstanceTask2" },
        "ServiceRegistries": [
          {
            "RegistryArn": {
              "Fn::GetAtt": [
                "DiscoveryServiceCore2",
                "Arn"
              ]
            },
            "Port": 7474
          }
        ]
      }
    },
    "Neo4jServiceCore3": {
      "Type": "AWS::ECS::Service",
      "Properties": {
        "ServiceName": "core3",
        "Cluster": { "Fn::Join": ["-",[ { "Ref": "AWS::StackName" }, "cluster" ] ] },
        "LaunchType": "FARGATE",
        "NetworkConfiguration": {
          "AwsvpcConfiguration": {
            "AssignPublicIp": "ENABLED",
            "SecurityGroups": [
              { "Ref": "SecurityGroupNeo4jEnterprise" }
            ],
            "Subnets": [
              { "Ref": "Subnet0" },
              { "Ref": "Subnet1" }
            ]
          }
        },
        "DesiredCount": 1,
        "TaskDefinition": { "Ref": "Neo4jInstanceTask3" },
        "ServiceRegistries": [
          {
            "RegistryArn": {
              "Fn::GetAtt": [
                "DiscoveryServiceCore3",
                "Arn"
              ]
            },
            "Port": 7474
          }
        ]
      }
    },
    "Neo4jInstanceTask1": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "Family": { "Fn::Sub": "${AWS::StackName}-instance" },
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE"
        ],
        "ExecutionRoleArn": { "Ref" : "ExecutionRole" },
        "TaskRoleArn": { "Ref": "TaskRole" },
        "Cpu": 256,
        "Memory": 1024,
        "ContainerDefinitions": [
          {
            "Name": "Neo4jContainerNode",
            "Essential": "true",
            "Privileged": "false",
            "Image": { "Ref": "DockerImage" },
            "MemoryReservation": { "Ref": "MemoryMB" },
            "Cpu": { "Ref": "CpuCapacity" },
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": "awslogs-neo4j",
                "awslogs-region": "us-east-1",
                "awslogs-stream-prefix": "ecs-neo4j"
              }
            },
            "Ulimits": [
              {
                "Name": "nofile",
                "SoftLimit": 40000,
                "HardLimit": 40000
              }
            ],
            "Environment": [
              {
                "Name": "NEO4J_dbms_memory_heap_max__size",
                "Value": { "Ref": "Neo4jJavaHeap" }
              },
              {
                "Name": "NEO4J_dbms_memory_heap_initial__size",
                "Value": { "Ref": "Neo4jJavaHeap" }
              },
              {
                "Name": "NEO4J_dbms_memory_pagecache_size",
                "Value": { "Ref": "Neo4jPageCache" }
              },
              {
                "Name": "NEO4J_AUTH",
                "Value": { "Fn::Join": [ "/" , ["neo4j", { "Ref": "Password" } ] ] }
              },
              {
                "Name": "NEO4J_ACCEPT_LICENSE_AGREEMENT",
                "Value": "yes"
              },
              {
                "Name": "NEO4J_dbms_mode",
                "Value": "CORE"
              },
              {
                "Name": "NEO4J_causal__clustering_minimum__core__cluster__size__at__runtime",
                "Value": "2"
              },
              {
                "Name": "NEO4J_causal__clustering_minimum__core__cluster__size__at__formation",
                "Value": "3"
              },
              {
                "Name": "NEO4J_causal__clustering_initial__discovery__members",
                "Value": "core1.neo4jcluster:5000,core2.neo4jcluster:5000,core3.neo4jcluster:5000"
              },
              {
                "Name": "NEO4J_causal__clustering_transaction__advertised__address",
                "Value": "core1.neo4jcluster:6000"
              },
              {
                "Name": "NEO4J_causal__clustering_discovery__advertised__address",
                "Value": "core1.neo4jcluster:5000"
              },
              {
                "Name": "NEO4J_causal__clustering_raft__advertised__address",
                "Value": "core1.neo4jcluster:7000"
              }
            ]
          }
        ]
      }
    },
    "Neo4jInstanceTask2": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "Family": { "Fn::Sub": "${AWS::StackName}-instance" },
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE"
        ],
        "ExecutionRoleArn": { "Ref" : "ExecutionRole" },
        "TaskRoleArn": { "Ref": "TaskRole" },
        "Cpu": 256,
        "Memory": 1024,
        "ContainerDefinitions": [
          {
            "Name": "Neo4jContainerNode",
            "Essential": "true",
            "Privileged": "false",
            "Image": { "Ref": "DockerImage" },
            "MemoryReservation": { "Ref": "MemoryMB" },
            "Cpu": { "Ref": "CpuCapacity" },
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": "awslogs-neo4j",
                "awslogs-region": "us-east-1",
                "awslogs-stream-prefix": "ecs-neo4j"
              }
            },
            "Ulimits": [
              {
                "Name": "nofile",
                "SoftLimit": 40000,
                "HardLimit": 40000
              }
            ],
            "Environment": [
              {
                "Name": "NEO4J_dbms_memory_heap_max__size",
                "Value": { "Ref": "Neo4jJavaHeap" }
              },
              {
                "Name": "NEO4J_dbms_memory_heap_initial__size",
                "Value": { "Ref": "Neo4jJavaHeap" }
              },
              {
                "Name": "NEO4J_dbms_memory_pagecache_size",
                "Value": { "Ref": "Neo4jPageCache" }
              },
              {
                "Name": "NEO4J_AUTH",
                "Value": { "Fn::Join": [ "/" , ["neo4j", { "Ref": "Password" } ] ] }
              },
              {
                "Name": "NEO4J_ACCEPT_LICENSE_AGREEMENT",
                "Value": "yes"
              },
              {
                "Name": "NEO4J_dbms_mode",
                "Value": "CORE"
              },
              {
                "Name": "NEO4J_causal__clustering_minimum__core__cluster__size__at__runtime",
                "Value": "2"
              },
              {
                "Name": "NEO4J_causal__clustering_minimum__core__cluster__size__at__formation",
                "Value": "3"
              },
              {
                "Name": "NEO4J_causal__clustering_initial__discovery__members",
                "Value": "core1.neo4jcluster:5000,core2.neo4jcluster:5000,core3.neo4jcluster:5000"
              },
              {
                "Name": "NEO4J_causal__clustering_transaction__advertised__address",
                "Value": "core2.neo4jcluster:6000"
              },
              {
                "Name": "NEO4J_causal__clustering_discovery__advertised__address",
                "Value": "core2.neo4jcluster:5000"
              },
              {
                "Name": "NEO4J_causal__clustering_raft__advertised__address",
                "Value": "core2.neo4jcluster:7000"
              }
            ]
          }
        ]
      }
    },
    "Neo4jInstanceTask3": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "Family": { "Fn::Sub": "${AWS::StackName}-instance" },
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE"
        ],
        "ExecutionRoleArn": { "Ref" : "ExecutionRole" },
        "TaskRoleArn": { "Ref": "TaskRole" },
        "Cpu": 256,
        "Memory": 1024,
        "ContainerDefinitions": [
          {
            "Name": "Neo4jContainerNode",
            "Essential": "true",
            "Privileged": "false",
            "Image": { "Ref": "DockerImage" },
            "MemoryReservation": { "Ref": "MemoryMB" },
            "Cpu": { "Ref": "CpuCapacity" },
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": "awslogs-neo4j",
                "awslogs-region": "us-east-1",
                "awslogs-stream-prefix": "ecs-neo4j"
              }
            },
            "Ulimits": [
              {
                "Name": "nofile",
                "SoftLimit": 40000,
                "HardLimit": 40000
              }
            ],
            "Environment": [
              {
                "Name": "NEO4J_dbms_memory_heap_max__size",
                "Value": { "Ref": "Neo4jJavaHeap" }
              },
              {
                "Name": "NEO4J_dbms_memory_heap_initial__size",
                "Value": { "Ref": "Neo4jJavaHeap" }
              },
              {
                "Name": "NEO4J_dbms_memory_pagecache_size",
                "Value": { "Ref": "Neo4jPageCache" }
              },
              {
                "Name": "NEO4J_AUTH",
                "Value": { "Fn::Join": [ "/" , ["neo4j", { "Ref": "Password" } ] ] }
              },
              {
                "Name": "NEO4J_ACCEPT_LICENSE_AGREEMENT",
                "Value": "yes"
              },
              {
                "Name": "NEO4J_dbms_mode",
                "Value": "CORE"
              },
              {
                "Name": "NEO4J_causal__clustering_minimum__core__cluster__size__at__runtime",
                "Value": "2"
              },
              {
                "Name": "NEO4J_causal__clustering_minimum__core__cluster__size__at__formation",
                "Value": "3"
              },
              {
                "Name": "NEO4J_causal__clustering_initial__discovery__members",
                "Value": "core1.neo4jcluster:5000,core2.neo4jcluster:5000,core3.neo4jcluster:5000"
              },
              {
                "Name": "NEO4J_causal__clustering_transaction__advertised__address",
                "Value": "core3.neo4jcluster:6000"
              },
              {
                "Name": "NEO4J_causal__clustering_discovery__advertised__address",
                "Value": "core3.neo4jcluster:5000"
              },
              {
                "Name": "NEO4J_causal__clustering_raft__advertised__address",
                "Value": "core3.neo4jcluster:7000"
              }
            ]
          }
        ]
      }
    },
    "ExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": { "Fn::Join": ["", [ { "Ref": "AWS::StackName"}, "ExecutionRole" ] ] },
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [ "ecs-tasks.amazonaws.com" ]
              },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
        ]
      }
    },
    "TaskRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": { "Fn::Join": ["", [ { "Ref": "AWS::StackName" }, "TaskRole" ] ] },
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [ "ecs-tasks.amazonaws.com"]
              },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        }
      }
    }
  },
  "Outputs": {
    "Note": {
      "Value": {
        "Fn::Join": [
          "\n",
          [
            "Your node is deployed, and currently forming.",
            "URL below should be available within a few minutes"
          ]
        ]
      }
    },
    "IMPORTANT": {
      "Value": {
        "Fn::Join": [
          "\n",
          [
            "PLEASE TAKE NOTE!  Your instance begins with an unsigned ",
            "SSL certificate.  This means that in order to access your ",
            "new system, you should configure your browser to trust this ",
            "IP address on **both** port 7473 **and** port 7687, otherwise ",
            "you may have issues connecting. ",
            "For more information see https://community.neo4j.com/t/troubleshooting-connection-issues-to-neo4j/129"
          ]
        ]
      }
    },
    "Username": {
      "Value": "neo4j"
    },
    "Password": {
      "Value": {
        "Ref": "Password"
      }
    }
  }
}
